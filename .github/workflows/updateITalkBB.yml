name: Update API Response and Save

on:
  schedule:
    # 每天 UTC 时间 00:00 运行
    # 请注意：cron 表达式基于 UTC 时间。例如，如果你希望在北京时间上午8点运行 (GMT+8)，
    # 那么需要设置为 UTC 00:00。
    - cron: '0 0 * * *'
  workflow_dispatch: # 允许你在 GitHub Actions 界面手动触发此工作流

jobs:
  send_request_and_save:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行此作业

    # **关键部分：显式授予权限**
    # 这一行确保 GitHub Actions bot 有权限将文件推送到你的仓库。
    # 请确保你的仓库设置 -> Actions -> General -> Workflow permissions 选项也设置为 'Read and write permissions'。
    permissions:
      contents: write # 授予对仓库内容的写入权限，以允许提交和推送文件

    steps:
    - name: Checkout repository # 步骤1: 克隆你的仓库代码
      uses: actions/checkout@v4 # 使用 actions/checkout@v4 来确保有最新功能和安全性

    - name: Send GET Request with Authorization Header # 步骤2: 发送 API 请求并保存响应
      run: |
        API_URL="https://api.italkbbtv.com/playauth/v1/live?series_id=62cbb01d4725b530583c1759&hl=zh_CN"
        # 从 GitHub Secrets 中获取 Authorization 令牌。
        # 请务必在你的仓库设置 -> Actions -> Secrets and variables -> Secrets 中添加名为 'ITALKBB_AUTH_TOKEN' 的 Secret。
        AUTH_TOKEN="${{ secrets.ITALKBB_AUTH_TOKEN }}"

        # 使用 curl 发送 GET 请求，将响应保存到 response.json
        # -s 选项用于静默模式，不显示进度或错误信息（除非错误严重）
        # -o 选项用于指定输出文件
        curl -s -X GET \
             -H "Authorization: Bearer $AUTH_TOKEN" \
             "$API_URL" \
             -o response.json

    - name: Configure Git # 步骤3: 配置 Git 用户信息，以便提交
      run: |
        # 设置 Git 提交的作者信息为 GitHub Actions 官方 bot
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and Push Response # 步骤4: 提交并推送 response.json 到仓库
      run: |
        # 将 response.json 文件添加到 Git 暂存区
        git add response.json
        
        # 检查是否有实际的文件更改。如果文件内容与上次提交相同，则不执行 commit，避免创建不必要的空提交。
        # 'if git diff-index --quiet HEAD' 会检查工作区是否有未暂存或未提交的更改。
        if git diff-index --quiet HEAD; then
          echo "No changes to response.json, skipping commit."
        else
          git commit -m "Update API response.json"
          # **关键的修改：使用 --force-with-lease 进行推送**
          # 这会强制推送，但只有在远程分支是你本地已知版本时才成功，更安全。
          # 如果你的主分支不是 'main'，请将 'main' 替换为你的实际主分支名称。
          git push origin main --force-with-lease 
        fi

    - name: Display Response (Optional) # 步骤5: (可选) 在日志中显示 response.json 的内容
      run: |
        cat response.json
